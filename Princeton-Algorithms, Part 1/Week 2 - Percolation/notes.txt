Quick find
Quadratic equasions, like 'Quick Find' are when. for example, int id[18] requires for each index to find a matching index
if you use a regular 'for' loop it means every point is touched a squared amount of times.
this is a quadratic equasion and it is the slowest algorithim as it checks ALL indexes x the amopunt of indexes there are or id[] x id[]
for large datasets Quadratic equasions are too slow.

Quick Union
Quick union associates different data with one-another in a linked list form, where every unit holds the data + the next unit it links to.
the avearge of accessing this data set is quicker than Quick Find but where a node of linked sets is = to N it still has to access every data point so it 'can' be too slow.

Weighted Quick Union
To improve upon Quick Union we ensure the tree from Quick Union does not get too tall. The improvement keeps track of the number of objects in each tree and balances by linking the root of a smaller tree to the root of a larger tree (aka union by height or "rank").
Find operation - takes time proportional to the depth of p& q
Union operation - takes constant time given roots
Proposition, Depth of any node x is at most lg (log to base 2) N
Ti implement Quick Union with path compression. Just after computing the root of p, set the id of each examined node to the point of that root.
Two-pass implementation - add second loop to root() to set the id[] of each examined node to the root.
Simpler one-pass variant - Make every other node in path point to its grandparent (thereby halving path length).

private int root(int i)
{
  while (i != id[i])
  {
    id[i] = id[id[id]];
    i = id[i];
  }
  return i;
}

in practice no reason not to use, Keeps tree almost completely flat.




